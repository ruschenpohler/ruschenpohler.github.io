install.packages("citr")
install.packages("citr")
install.packages("citr")
install.packages("citr")
install.packages("citr")
install.packages("citr")
install.packages("citr")
citr:::insert_citation()
install.packages("htmltools")
install.packages("htmltools")
citr:::insert_citation()
install.packages("classInt")
# Function to extract text from a PDF
extract_text_from_pdf <- function(pdf_path) {
text <- pdf_text(pdf_path)
return(paste(text, collapse = " "))
}
body <- list(
model = model,
messages = list(list(role = "user", content = text)),
temperature = 0.7
)
# Function to send text to GPT
query_gpt <- function(text, model = "gpt-3.5-turbo") {
url <- "https://api.openai.com/v1/chat/completions"
body <- list(
model = model,
messages = list(list(role = "user", content = text)),
temperature = 0.7
)
response <- POST(
url,
add_headers(`Authorization` = paste("Bearer", api_key),
`Content-Type` = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
content <- content(response, as = "parsed")
return(content$choices[[1]]$message$content)
}
# Function to extract text from PDF
extract_text_from_pdf <- function(pdf_path) {
text <- pdf_text(pdf_path)
return(paste(text, collapse = " "))
}
pdf_path <- "C:\Users\tcu0916\Desktop\GPT\PDF\Jack and Suri - 2014 - Risk Sharing and Transactions Costs Evidence from.pdf"
pdf_path <- "C:\Users\tcu0916\Desktop\GPT\PDF\Jack2014_riskSharing.pdf"
library(jsonlite)
library(httr)
library(jsonlite)
library(pdftools)
api_key <- "your_api_key_here"  # Replace with your actual API key
# Function to extract text from PDF
extract_text_from_pdf <- function(pdf_path) {
text <- pdf_text(pdf_path)
return(paste(text, collapse = " "))
}
# Function to query GPT
query_gpt <- function(text, question, model = "gpt-3.5-turbo") {
url <- "https://api.openai.com/v1/chat/completions"
body <- list(
model = model,
messages = list(
list(role = "system", content = "You are a PhD economist with a lifetime of experience in empirical research and econometrics. You are technically savvy and your language is precise. You explain matters always on a technical level, making extensive use of math when needed, and on an intuitive level, making use of examples that fit the context of the paper. Your criticism is always constructive but meticulous."),
list(role = "user", content = paste("Document text:", text, "\n\nQuestion:", question))
),
temperature = 0.7
)
response <- POST(
url,
add_headers(`Authorization` = paste("Bearer", api_key),
`Content-Type` = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
content <- content(response, as = "parsed")
# Check if response contains expected fields
if (!is.null(content$choices) && length(content$choices) > 0) {
return(content$choices[[1]]$message$content)
} else {
return("Error: No response from GPT.")
}
}
# Select the right PDF
folder_path <- "C:/Users/tcu0916/Desktop/GPT/PDF"  # Adjust as needed
# List all PDF files in the folder
pdf_files <- list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)
# Check if there are any PDF files in the folder
if(length(pdf_files) == 0) {
stop("No PDF files found in the specified folder.")
}
# Print the list of files
cat("Select a PDF by entering its corresponding number:\n")
for (i in 1:length(pdf_files)) {
cat(i, ": ", basename(pdf_files[i]), "\n", sep = "")
}
# Ask user to select a file by number
selection <- as.integer(readline(prompt = "Enter the number of the PDF file you want to select: "))
# Validate selection
if (is.na(selection) || selection < 1 || selection > length(pdf_files)) {
stop("Invalid selection. Please enter a valid number.")
}
library(httr)
library(jsonlite)
library(pdftools)
api_key <- "your_api_key_here"  # Replace with your actual API key
# Function to extract text from PDF
extract_text_from_pdf <- function(pdf_path) {
text <- pdf_text(pdf_path)
return(paste(text, collapse = " "))
}
# Function to query GPT
query_gpt <- function(text, question, model = "gpt-3.5-turbo") {
url <- "https://api.openai.com/v1/chat/completions"
body <- list(
model = model,
messages = list(
list(role = "system", content = "You are a PhD economist with a lifetime of experience in empirical research and econometrics. You are technically savvy and your language is precise. You explain matters always on a technical level, making extensive use of math when needed, and on an intuitive level, making use of examples that fit the context of the paper. Your criticism is always constructive but meticulous."),
list(role = "user", content = paste("Document text:", text, "\n\nQuestion:", question))
),
temperature = 0.7
)
response <- POST(
url,
add_headers(`Authorization` = paste("Bearer", api_key),
`Content-Type` = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
content <- content(response, as = "parsed")
# Check if response contains expected fields
if (!is.null(content$choices) && length(content$choices) > 0) {
return(content$choices[[1]]$message$content)
} else {
return("Error: No response from GPT.")
}
}
# Select the right PDF
folder_path <- "C:/Users/tcu0916/Desktop/GPT/PDF"  # Adjust as needed
# List all PDF files in the folder
pdf_files <- list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)
# Check if there are any PDF files in the folder
if(length(pdf_files) == 0) {
stop("No PDF files found in the specified folder.")
}
# Print the list of files
cat("Select a PDF by entering its corresponding number:\n")
for (i in 1:length(pdf_files)) {
cat(i, ": ", basename(pdf_files[i]), "\n", sep = "")
}
# Ask user to select a file by number
selection <- as.integer(readline(prompt = "Enter the number of the PDF file you want to select: "))
# Validate selection
if (is.na(selection) || selection < 1 || selection > length(pdf_files)) {
stop("Invalid selection. Please enter a valid number.")
}
library(httr)
library(jsonlite)
library(pdftools)
api_key <- "your_api_key_here"  # Replace with your actual API key
# Function to extract text from PDF
extract_text_from_pdf <- function(pdf_path) {
text <- pdf_text(pdf_path)
return(paste(text, collapse = " "))
}
# Function to query GPT
query_gpt <- function(text, question, model = "gpt-3.5-turbo") {
url <- "https://api.openai.com/v1/chat/completions"
body <- list(
model = model,
messages = list(
list(role = "system", content = "You are a PhD economist with a lifetime of experience in empirical research and econometrics. You are technically savvy and your language is precise. You explain matters always on a technical level, making extensive use of math when needed, and on an intuitive level, making use of examples that fit the context of the paper. Your criticism is always constructive but meticulous."),
list(role = "user", content = paste("Document text:", text, "\n\nQuestion:", question))
),
temperature = 0.7
)
response <- POST(
url,
add_headers(`Authorization` = paste("Bearer", api_key),
`Content-Type` = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
content <- content(response, as = "parsed")
# Check if response contains expected fields
if (!is.null(content$choices) && length(content$choices) > 0) {
return(content$choices[[1]]$message$content)
} else {
return("Error: No response from GPT.")
}
}
# Select the right PDF
folder_path <- "C:/Users/tcu0916/Desktop/GPT/PDF"  # Adjust as needed
# List all PDF files in the folder
pdf_files <- list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)
# Check if there are any PDF files in the folder
if(length(pdf_files) == 0) {
stop("No PDF files found in the specified folder.")
}
# Print the list of files
cat("Select a PDF by entering its corresponding number:\n")
for (i in 1:length(pdf_files)) {
cat(i, ": ", basename(pdf_files[i]), "\n", sep = "")
}
# Ask user to select a file by number
selection <- as.integer(readline(prompt = "Enter the number of the PDF file you want to select: "))
# Validate selection
if (is.na(selection) || selection < 1 || selection > length(pdf_files)) {
stop("Invalid selection. Please enter a valid number.")
}
# Get the selected PDF path
selected_pdf_path <- pdf_files[selection]
cat("You selected: ", basename(selected_pdf_path), "\n")
# Extract text from the selected PDF
pdf_text <- extract_text_from_pdf(selected_pdf_path)
# Ask the user to input a question (optional, if you want to customize the question)
question <- readline(prompt = "Enter your question about the document: ")
# Ask GPT a question about the PDF
response <- query_gpt(pdf_text, question)
# Display the response
cat("GPT's response:\n", response)
library(httr)
library(jsonlite)
library(pdftools)
api_key <- "your_api_key_here"  # Replace with your actual API key
# Function to extract text from PDF
extract_text_from_pdf <- function(pdf_path) {
text <- pdf_text(pdf_path)
return(paste(text, collapse = " "))
}
# Function to query GPT
query_gpt <- function(text, question, model = "gpt-3.5-turbo") {
url <- "https://api.openai.com/v1/chat/completions"
body <- list(
model = model,
messages = list(
list(role = "system", content = "You are a PhD economist with a lifetime of experience in empirical research and econometrics. You are technically savvy and your language is precise. You explain matters always on a technical level, making extensive use of math when needed, and on an intuitive level, making use of examples that fit the context of the paper. Your criticism is always constructive but meticulous."),
list(role = "user", content = paste("Document text:", text, "\n\nQuestion:", question))
),
temperature = 0.7
)
response <- POST(
url,
add_headers(`Authorization` = paste("Bearer", api_key),
`Content-Type` = "application/json"),
body = toJSON(body, auto_unbox = TRUE),
encode = "json"
)
content <- content(response, as = "parsed")
# Check if response contains expected fields
if (!is.null(content$choices) && length(content$choices) > 0) {
return(content$choices[[1]]$message$content)
} else {
return("Error: No response from GPT.")
}
}
# Select the right PDF
folder_path <- "C:/Users/tcu0916/Desktop/GPT/PDF"  # Adjust as needed
# List all PDF files in the folder
pdf_files <- list.files(folder_path, pattern = "\\.pdf$", full.names = TRUE)
# Debug: Print the files
cat("Files in the folder:\n")
print(pdf_files)
# Check if there are any PDF files in the folder
if(length(pdf_files) == 0) {
stop("No PDF files found in the specified folder.")
}
# Print the list of files
cat("Select a PDF by entering its corresponding number:\n")
for (i in 1:length(pdf_files)) {
cat(i, ": ", basename(pdf_files[i]), "\n", sep = "")
}
# Ask user to select a file by number
selection <- readline(prompt = "Enter the number of the PDF file you want to select: ")
# Convert the selection to an integer explicitly
selection <- as.integer(selection)
# Debug: Print the selection
cat("You entered selection: ", selection, "\n")
# Validate selection
if (is.na(selection) || selection < 1 || selection > length(pdf_files)) {
stop("Invalid selection. Please enter a valid number.")
}
selection <- readline(prompt = "Enter something: ")
cat("You entered:", selection)
source("C:/Users/tcu0916/Desktop/GPT/test.R")
source("C:/Users/tcu0916/Desktop/GPT/discussPDFs.R")
source("C:/Users/tcu0916/Desktop/GPT/discussPDFs.R")
source("C:/Users/tcu0916/Desktop/GPT/discussPDFs.R")
source("C:/Users/tcu0916/Desktop/GPT/discussPDFs.R")
source("C:/Users/tcu0916/Desktop/GPT/discussPDFs.R")
source("C:/Users/tcu0916/Desktop/GPT/discussPDFs.R")
install.packages("Rtools")
install.packages("Rtools")
R.version
install.packages("Rtools")
install.packages("brms")
